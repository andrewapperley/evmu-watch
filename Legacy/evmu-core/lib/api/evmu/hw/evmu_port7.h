#ifndef EVMU_PORT7_H
#define EVMU_PORT7_H

#include "../hw/evmu_peripheral.h"

#ifdef __cplusplus
extern "C" {
#endif

// PORT 7 + EXTERNAL INTERRUPT CONTROLLER + TIMER0 EXT SIGNAL INPUT

typedef enum EVMU_PIN_SIGNAL_STATE {
    EVMU_PIN_SIGNAL_STATE_LEVEL_LOW     = 0x00,
    EVMU_PIN_SIGNAL_STATE_RISING_EDGE   = 0x01,
    EVMU_PIN_SIGNAL_STATE_LEVEL_HIGH    = 0x11,
    EVMU_PIN_SIGNAL_STATE_FALLING_EDGE  = 0x10
} EVMU_PIN_SIGNAL_STATE;

typedef enum EVMU_PORT7_PIN {
    EVMU_PORT7_PIN_P70,
    EVMU_PORT7_PIN_INT0         = EVMU_PORT7_PIN_P70,
    EVMU_PORT7_PIN_5V_DETECT    = EVMU_PORT7_PIN_P70,

    EVMU_PORT7_PIN_P71,
    EVMU_PORT7_PIN_INT1         = EVMU_PORT7_PIN_P71,
    EVMU_PORT7_PIN_LOW_VOLTAGE  = EVMU_PORT7_PIN_P71,

    EVMU_PORT7_PIN_P72,
    EVMU_PORT7_PIN_INT2         = EVMU_PORT7_PIN_P72,
    EVMU_PORT7_PIN_T0IN         = EVMU_PORT7_PIN_P72,
    EVMU_PORT7_PIN_ID0          = EVMU_PORT7_PIN_P72,

    EVMU_PORT7_PIN_P73,
    EVMU_PORT7_PIN_INT3         = EVMU_PORT7_PIN_P73,
    EVMU_PORT7_PIN_T1IN         = EVMU_PORT7_PIN_P73,
    EVMU_PORT7_PIN_ID1          = EVMU_PORT7_PIN_P73,

    EVMU_PORT7_PIN_COUNT
} EVMU_PORT7_PIN;

//Level-based interrupt detection generates an interrupt continuously
typedef enum EVMU_SIGNAL_DETECT_CONDITION {
    EVMU_SIGNAL_DETECT_FALLING_EDGE     = 0x00,
    EVMU_SIGNAL_DETECT_LOW_LEVEL        = 0x01,
    EVMU_SIGNAL_DETECT_RISING_EDGE      = 0x10,
    EVMU_SIGNAL_DETECT_HIGH_LEVEL       = 0x11,
    EVMU_SIGNAL_DETECT_CONDITION_COUNT
} EVMU_SIGNAL_DETECT_CONDITION;

typedef enum EVMU_NOISE_FILTER_TIME_CONSTANT {
    EVMU_NOISE_FILTER_TIME_16_TCYC,
    EVMU_NOISE_FILTER_TIME_64_TCYC,
    EVMU_NOISE_FILTER_TIME_COUNT
} EVMU_NOISE_FILTER_TIME_CONSTANT;

typedef enum EVMU_PORT7_CONNECTION_TYPE {
    EVMU_PORT7_CONNECTION_NONE   = 0x00,
    EVMU_PORT7_CONNECTION_DC     = 0x44, //'D' ASCII
    EVMU_PORT7_CONNECTION_VMU    = 0x56,  //'V' ASCII
    EVMU_PORT7_CONNECTION_OTHER  = 0x01
} EVMU_PORT7_CONNECTION_TYPE;


GBL_DECLARE_HANDLE(EvmuPort7); // Programmable Interrupt Controller

GBL_DECLARE_ENUM(EVMU_PORT7_PROPERTY) {
    EVMU_PORT7_PROPERTY_PIN0_SIGNAL = EVMU_PERIPHERAL_PROPERTY_BASE_COUNT,
    EVMU_PORT7_PROPERTY_PIN0_DETECT_CONDITION,      // I01CR.2-3
    EVMU_PORT7_PROPERTY_PIN0_SOURCE_ENABLED,        // I01CR.0
    EVMU_PORT7_PROPERTY_PIN0_INTERRUPT_ENABLE,      // I01CR.1
    EVMU_PORT7_PROPERTY_PIN0_INT0_IRQ,               // actual interrupt request

    EVMU_PORT7_PROPERTY_PIN1_SIGNAL,
    EVMU_PORT7_PROPERTY_PIN1_DETECT_CONDITION,      // I01CR.6-7
    EVMU_PORT7_PROPERTY_PIN1_SOURCE_ENABLED,        // I01CR.5
    EVMU_PORT7_PROPERTY_PIN1_INTERRUPT_ENABLE,      // I01CR.4
    EVMU_PORT7_PROPERTY_PIN1_INT1_IRQ,

    EVMU_PORT7_PROPERTY_PIN2_SIGNAL,
    EVMU_PORT7_PROPERTY_PIN2_DETECT_RISING_EDGE,    // I23CR.3
    EVMU_PORT7_PROPERTY_PIN2_DETECT_FALLING_EDGE,   // I23CR.2
    EVMU_PORT7_PROPERTY_PIN2_SOURCE_ENABLED,        // I23CR.1
    EVMU_PORT7_PROPERTY_PIN2_INTERRUPT_ENABLE,      // I23CR.0
    EVMU_PORT7_PROPERTY_PIN2_INT2_IRQ,

    EVMU_PORT7_PROPERTY_PIN3_SIGNAL,                // ACTUAL PIN SIGNAL
    EVMU_PORT7_PROPERTY_PIN3_SIGNAL_FILTERED,       // SIGNAL AFTER FILTER HAS BEEN APPLIED
    EVMU_PORT7_PROPERTY_NOISE_FILTER_TIME_CONSTANT, //  ISL.1-2
    EVMU_PORT7_PROPERTY_PIN3_DETECT_RISING_EDGE,    //  I23CR.7
    EVMU_PORT7_PROPERTY_PIN3_DETECT_FALLING_EDGE,   //  I23CR.6
    EVMU_PORT7_PROPERTY_PIN3_SOURCE_ENABLED,        //  I23CR.5
    EVMU_PORT7_PROPERTY_PIN3_INTERRUPT_ENABLE,      //  I23CR.4
    EVMU_PORT7_PROPERTY_PIN3_INT3_IRQ,
    EVMU_PORT7_PROPERTY_PIN3_TIMER0_EXT_SIGNAL_INPUT,  // PIN3 or PIN2 SOURCE ENABLED feeding into timer0 depending on ISL.0!

    EVMU_PORT7_PROPERTY_COUNT
};


// INT_CONDITION    - 2 bit signal detection condition
// INT_SOURCE       - Set if INT_CONDITION has been detected (not reset automatically, reset by ISR)
// INT_CONTROL      - When set, raise interrupt when INT_SOURCE is set

EVMU_API evmuPort7Pin01Configure(EvmuPort7 hPort, EVMU_PORT7_PIN pin, EvmuBool intEnable, EVMU_SIGNAL_DETECT_CONDITION detectCond);
EVMU_API evmuPort7Pin2Configure(EvmuPort7 hPort, EvmuBool intEnabled, EvmuBool detectRisingEdge, EvmuBool detectFallingEdge);
EVMU_API evmuPort7Pin3Configure(EvmuPort7 hPort, EvmuBool intEnabled, EvmuBool detectRisingEdge, EvmuBool detectFallingEdge, EVMU_NOISE_FILTER_TIME_CONSTANT filter);

EVMU_API evmuPort7PinSignalLevelSet(EvmuPort7 hPort, EVMU_PORT7_PIN pin, EvmuBool highLevel);
EVMU_API evmuPort7PinSignalState(EvmuPort7 hPort, EVMU_PORT7_PIN pin, EVMU_PIN_SIGNAL_STATE* pState);


//void gyVmuPort7Connect(struct VMUDevice* dev, VMU_PORT7_CONNECTION_TYPE type);
//void gyVmuPort7Disconnect(struct VMUDevice* dev);


#ifdef __cplusplus
}
#endif

#endif // GYRO_VMU_PORT7_H
